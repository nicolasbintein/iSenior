{"ast":null,"code":"var _jsxFileName = \"/Users/macbookprom1/Desktop/SeniorGPT/frontend/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { XMarkIcon, PaperAirplaneIcon } from '@heroicons/react/24/outline';\nimport { useSelector } from 'react-redux';\nimport '../styles/chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [error, setError] = useState('');\n  const username = useSelector(state => {\n    var _state$auth$user;\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user.username;\n  }) || 'bintein_nicolas';\n  useEffect(() => {\n    setMessages([{\n      text: `Bonjour ${username}, Comment puis-je t'aider?`,\n      sent: false\n    }]);\n  }, [username]);\n  const sendMessageToChatGPT = async message => {\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer 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'\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: [{\n            role: 'user',\n            content: message\n          }],\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) throw new Error(`Erreur HTTP ${response.status}: ${await response.text()}`);\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (err) {\n      setError(`Erreur : ${err.message}`);\n      return 'Désolé, je ne peux pas répondre pour le moment.';\n    }\n  };\n  const handleSendMessage = async () => {\n    if (inputMessage.trim()) {\n      setMessages(prev => [...prev, {\n        text: inputMessage,\n        sent: true\n      }]);\n      const reply = await sendMessageToChatGPT(inputMessage);\n      setMessages(prev => [...prev, {\n        text: reply,\n        sent: false\n      }]);\n      setInputMessage('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: role &&\n    /*#__PURE__*/\n    // Assure que le chat n'apparaît que si l'utilisateur est connecté\n    _jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"SD1 Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-button\",\n          onClick: () => window.history.back(),\n          children: /*#__PURE__*/_jsxDEV(XMarkIcon, {\n            className: \"h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messages\",\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.sent ? 'sent' : 'received',\n          children: msg.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Posez une question...\",\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSendMessage,\n          className: \"send-button\",\n          children: /*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n            className: \"h-5 w-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"fehZkc9lcR7PrqiMQALeTZxjPOo=\", false, function () {\n  return [useSelector];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","XMarkIcon","PaperAirplaneIcon","useSelector","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputMessage","setInputMessage","error","setError","username","state","_state$auth$user","auth","user","text","sent","sendMessageToChatGPT","message","response","fetch","method","headers","body","JSON","stringify","model","role","content","temperature","ok","Error","status","data","json","choices","err","handleSendMessage","trim","prev","reply","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","history","back","map","msg","index","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["/Users/macbookprom1/Desktop/SeniorGPT/frontend/src/components/Chat.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { XMarkIcon, PaperAirplaneIcon } from '@heroicons/react/24/outline';\nimport { useSelector } from 'react-redux';\nimport '../styles/chat.css';\n\nfunction Chat() {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [error, setError] = useState('');\n  const username = useSelector((state) => state.auth.user?.username) || 'bintein_nicolas';\n\n  useEffect(() => {\n    setMessages([{ text: `Bonjour ${username}, Comment puis-je t'aider?`, sent: false }]);\n  }, [username]);\n\n  const sendMessageToChatGPT = async (message) => {\n    try {\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer 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'\n        },\n        body: JSON.stringify({\n          model: 'gpt-3.5-turbo',\n          messages: [{ role: 'user', content: message }],\n          temperature: 0.7\n        })\n      });\n      if (!response.ok) throw new Error(`Erreur HTTP ${response.status}: ${await response.text()}`);\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (err) {\n      setError(`Erreur : ${err.message}`);\n      return 'Désolé, je ne peux pas répondre pour le moment.';\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (inputMessage.trim()) {\n      setMessages((prev) => [...prev, { text: inputMessage, sent: true }]);\n      const reply = await sendMessageToChatGPT(inputMessage);\n      setMessages((prev) => [...prev, { text: reply, sent: false }]);\n      setInputMessage('');\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {role && ( // Assure que le chat n'apparaît que si l'utilisateur est connecté\n        <div className=\"chat-box\">\n          <div className=\"chat-header\">\n            <h2>SD1 Chat</h2>\n            <button className=\"close-button\" onClick={() => window.history.back()}>\n              <XMarkIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n          <div className=\"messages\">\n            {messages.map((msg, index) => (\n              <div key={index} className={msg.sent ? 'sent' : 'received'}>\n                {msg.text}\n              </div>\n            ))}\n          </div>\n          <div className=\"message-input\">\n            <input\n              type=\"text\"\n              value={inputMessage}\n              onChange={(e) => setInputMessage(e.target.value)}\n              placeholder=\"Posez une question...\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            />\n            <button onClick={handleSendMessage} className=\"send-button\">\n              <PaperAirplaneIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n          {error && <div className=\"alert error\">{error}</div>}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}